#!/bin/bash

function fatal() {
	echo "$@" 1>&2
	exit 1
}

function log() {
	echo "$@" 1>&2
}

#
# Default VM opts
#
need_sudo=""
emulated=no
vcpus=2
ram=3G
legacy_bios=no
vnc_screen=1
redirect_host_port=3001
redirect_vm_port=22
monitor_socket=auto
runvm_dir="/tmp/$USER-runvm"

#
# Default disks, networks and devices
#
storages="default_disk"
default_disk_file="$vmroot/system.qcow2"
default_disk_format="qcow2"
default_disk_cache="none"
default_disk_discard="unmap"
default_disk_bootindex="0"

networks="default_net"
default_net_type="user"
default_net_model="virtio"

#
# Default CPU model
#
vcpumodel="host"

if [ "$2" == "" ] ; then
	echo "Usage: $0 <config> -gui|-console|-vnc [-b]" 1>&2
	exit 1
fi

vmroot="$(dirname $(basename $1))"
vmname="$(basename $1)"
vmconfig="$1"
[ "$vmroot" = "" -o "$vmroot" = "." ] && vmroot="$(pwd)"

confdir="$(dirname "$vmconfig")"
[ "$confdir" = "." ] && confdir="$(pwd)"

host_os="$(uname)"
host_arch="$(uname -m)"

[ "$host_os" = "Darwin" -a "$host_arch" = "arm64" ] && host_arch="aarch64"

[ -e "$vmconfig" ] && . "$vmconfig"

[ "$default_net_opts" = "" ] && default_net_opts="hostfwd=tcp::$redirect_host_port-:$redirect_vm_port"

[ "$vm_arch" = "" ] && vm_arch="$host_arch"

if [ "$host_arch" = "$vm_arch" ] ; then
	if [ "$accel_driver" != "" ] ; then
		accel="-accel $accel_driver"
	else
		case "$host_os" in
		"Darwin")
			hostos="macos"
			[ "$emulated" != "yes" ] && accel="-accel hvf"
			[ "$host_arch" = "x86_64" ] && vcpumodel="Skylake-Client-v4"
			;;
		"Linux")
			hostos="linux"
			[ "$emulated" != "yes" ] && accel="-accel kvm"
			;;
		*)
			if [ "$emulated" != "yes" ] ; then
				fatal "Unsupported host OS, use emulated=yes"
			else
				accel=""
			fi
			;;
		esac
	fi
fi

case "$vm_arch" in
x86_64)
	platform="q35"
	[ "$gui_video" = "" ] && gui_video="VGA"
	[ "$vnc_video" = "" ] && vnc_video="VGA"
	;;
aarch64)
	if [ "$host_os" = "Darwin" -a "$host_arch" = "aarch64" -a "$vm_arch" = "aarch64" ] ; then
		# aarch64 on macOS for Apple Silicon with HVF has a limitations
		platform="virt,highmem=off"
		[ "$cpumodel" = "" ] && vcpumodel="cortex-a72"
	else
		platform="virt"
	fi
	[ "$gui_video" = "" ] && gui_video="ramfb"
	[ "$vnc_video" = "" ] && vnc_video="ramfb"
	;;
*)
	fatal "Unsupported VM arch: $vm_arch"
	;;
esac

[ "$cpumodel" = "" ] && cpumodel="$vcpumodel"

qemu="qemu-system-$vm_arch"
if ! which $qemu 2>/dev/null 1>/dev/null ; then
	if [ "$host_arch" = "$vm_arch" -a "$host_arch" = "x86_64" ] ; then
		for qemu in /usr/libexec/qemu-kvm /usr/libexec/qemu-kvm-ev UNKNOWN ; do
			if [ -x "$qemu" ] ; then
				break
			fi
		done
		if [ "$qemu" = "UNKNOWN" ] ; then
			fatal "Unable to find qemu-system-$vm_arch nor qemu-kvm nor qemu-kvm-ev"
		fi
		redhat_qemu="yes"
		[ "$gui_video" = "vmware-svga" ] && gui_video="VGA"
		[ "$vnc_video" = "vmware-svga" ] && vnc_video="VGA"
	else
		fatal "Unable to find qemu-system-$vm_arch for host $host_arch"
	fi
fi

log "Using QEMU binary $qemu"

share_files="$(dirname $(which $qemu))/../share"

# QEMU can be in /usr with /bin -> /usr/bin
# Handle here /bin location with care
[ "$share_files" = "/bin/../share" ] && share_files="/usr/share"

fw_status="broken"
if [ "$host_os" = "Linux" ] ; then
	if [ "$legacy_bios" != "yes" ] ; then
		if [ "$vm_arch" = "aarch64" ] ; then
			efi_code="$share_files/edk2/aarch64/QEMU_EFI-pflash.raw"
			vars_file="$share_files/edk2/aarch64/vars-template-pflash.raw"
			fw_status=require
		elif [ "$vm_arch" = "arm" ] ; then
			efi_code="$share_files/edk2/arm/QEMU_EFI-pflash.raw"
			vars_file="$share_files/edk2/arm/vars-template-pflash.raw"
			fw_status=require
		elif [ "$vm_arch" = "x86_64" -o "$vm_arch" = "i386" ] ; then
			efi_code="$share_files/edk2/ovmv/OVMF_CODE.fd"
			vars_file="$share_files/edk2/ovmv/OVMF_VARS.fd"
			fw_status=require
		else
			fatal "EFI unsupported for $vm_arch on $host_os"
		fi
	else
		[ "$vm_arch" = "x86_64" ] && fw_status=ignore
		[ "$vm_arch" = "i386" ] && fw_status=ignore
	fi
elif [ "$host_os" = "Darwin" ] ; then
	if [ "$legacy_bios" != "yes" ] ; then
		if [ "$vm_arch" = "aarch64" ] ; then
			efi_code="$share_files/qemu/edk2-aarch64-code.fd"
			vars_file="$share_files/qemu/edk2-arm-vars.fd"
			fw_status=require
		elif [ "$vm_arch" = "arm" ] ; then
			efi_code="$share_files/qemu/edk2-arm-code.fd"
			vars_file="$share_files/qemu/edk2-arm-vars.fd"
			fw_status=require
		elif [ "$vm_arch" = "x86_64" ] ; then
			efi_code="$share_files/qemu/edk2-x86_64-code.fd"
			vars_file="$share_files/qemu/edk2-i386-vars.fd"
			fw_status=require
		elif [ "$vm_arch" = "i386" ] ; then
			efi_code="$share_files/qemu/edk2-i386-code.fd"
			vars_file="$share_files/qemu/edk2-i386-vars.fd"
			fw_status=require
		else
			fatal "EFI unsupported for $vm_arch on $host_os"
		fi
	else
		[ "$vm_arch" = "x86_64" ] && fw_status=ignore
		[ "$vm_arch" = "i386" ] && fw_status=ignore
	fi
fi

if [ "$fw_status" = "ignore" ] ; then
	log "No special firmware required"
elif [ "$fw_status" = "require" ] ; then
	log "Will use EFI code from $efi_code"
	efi_opts="-drive if=pflash,format=raw,readonly=on,file=$efi_code"
	if [ "$private_efi_vars" = "yes" ] ; then
		vars_readonly=off
		if [ "$efi_vars" = "" ] ; then
			efi_vars="$confdir/$vmname-efivars"
		fi
		log "Will use EFI vars $efi_vars READ-WRITE"
		if [ ! -f "$efi_vars" ] ; then
			cp "$vars_file" "$efi_vars" || fatal "Failed to instantiate private vars form $vars_file to $efi_vars"
			log "Private vars $efi_vars built from $vars_file"
		fi
	else
		vars_readonly=on
		efi_vars="$vars_file"
		log "Will use EFI vars $efi_vars READ-ONLY"
	fi
	efi_opts="$efi_opts -drive if=pflash,format=raw,readonly=$vars_readonly,file=$efi_vars"
else
	fatal "Unknown firmware setup for $vm_arch on $host_os"
fi

diskopts=""

for disk in $storages ; do
	v="$disk"_file
	diskfile="${!v}"

	v="$disk"_format
	format="${!v}"

	v="$disk"_cache
	cache="${!v}"

	v="$disk"_discard
	discard="${!v}"

	v="$disk"_bootindex
	bootindex="${!v}"

	v="$disk"_readonly
	readonly="${!v}"

	v="$disk"_removable
	removable="${!v}"

	v="$disk"_media
	media="${!v}"

	v="$disk"_type
	type="${!v}"
	[ "$type" = "" ] && type="virtio-blk"

	diskopts="$diskopts -device $type,drive=$disk,serial=$disk"
	[ "$bootindex" != "" ] && diskopts="$diskopts,bootindex=$bootindex"
	[ "$removable" != "" ] && diskopts="$diskopts,removable=$removable"
	if [ "$diskfile" != "" ] ; then
		fn_start="$(echo "$diskfile" | cut -b 1)"
		[ "$fn_start" != "/" ] && diskfile="$confdir/$diskfile"
		diskopts="$diskopts -drive file=$diskfile,if=none,id=$disk"
	elif [ "$media" = "cdrom" ] ; then
		diskopts="$diskopts -drive if=none,id=$disk"
	else
		fatal "Non-CDROM media requires file ""$disk""_type to be set"
	fi
	[ "$format" != "" ] && diskopts="$diskopts,format=$format"
	[ "$cache" != "" ] && diskopts="$diskopts,cache=$cache"
	[ "$discard" != "" ] && diskopts="$diskopts,discard=$discard"
	[ "$media" != "" ] && diskopts="$diskopts,media=$media"
	[ "$readonly" != "" ] && diskopts="$diskopts,readonly=$readonly"
done

netopts=""

for net in $networks ; do
	v="$net"_type
	netdevtype="${!v}"
	[ "$netdevtype" = "" ] && netdevtype="user"

	v="$net"_model
	netdevmodel="${!v}"
	[ "$netdevmodel" = "" ] && netdevmodel="virtio"
	[ "$netdevmodel" = "virtio" ] && netdevmodel="virtio-net"

	if [ "$netdevtype" = "user" ] ; then
		v="$net"_opts
		netdevopts="${!v}"
	elif [ "$netdevtype" = "host" -a "$hostos" = "linux" ] ; then
		need_sudo="sudo -n"
		v="$net"_bridge
		bridge_name="${!v}"
		if [ "$bridge_name" = "" ] ; then
			fatal "Interface '$net' require "$net"_bridge=<bridge_if_name> option"
		fi
		netdevtype="bridge"
		netdevopts="br=$bridge_name"
	elif [ "$netdevtype" = "host" -a "$hostos" = "macos" ] ; then
		need_sudo="sudo -n"
		v="$net"_mode
		mode="${!v}"
		v="$net"_ip_start
		ip_start="${!v}"
		v="$net"_ip_end
		ip_end="${!v}"
		v="$net"_ip_mask
		ip_mask="${!v}"
		v="$net"_uuid
		netuuid="${!v}"
		if [ "$mode" = "vm-only" ] ; then
			netdevtype="vmnet-host"
			netdevopts="isolated=on,uuid="$(uuidgen | tr [A-Z] [a-z])
		elif [ "$mode" = "vms-only" ] ; then
			if [ "$netuuid" = "" ] ; then
				fatal "Internal network $net requires "$net"_uuid=<value>"
			fi
			netdevtype="vmnet-host"
			netdevopts="uuid=$netuud"
		elif [ "$mode" = "host-only" -o "$mode" = "nat" ] ; then
			if [ "$ip_start" = "" -o "$ip_end" = "" -o "$ip_mask" = "" ] ; then
				fatal "Interface '$net' require "$net"_ip_start, "$net"_ip_end and "$net"_ip_mask options"
			fi
			netdevtype="vmnet-host"
			[ "$mode" = "nat" ] && netdevtype="vmnet-shared"
			netdevopts="start-address=$ip_start,end-address=$ip_end,subnet-mask=$ip_mask"
		elif [ "$mode" = "bridge" ] ; then
			v="$net"_backend
			backend_dev="${!v}"
			if [ "$backend_dev" = "" ] ; then
				fatal "Interface '$net' requires "$net"_backend=<physical_device>"
			fi
			netdevtype="vmnet-bridged"
			netdevopts="ifname=$backend_dev"
		else
			fatal "Unsupported "$net"_mode=$mode, must be one of nat | private | internal | isolated"
		fi
	else
		log "Unsupported network device type"
		log "The only supported are:"
		log "   user  => usermode device with host port redirections"
		if [ "$hostos" = "linux" ] ; then
			log "   host => attach vm net to existing host bridge"
			log "              opts: <name>_bridge  => bridge interface to attach"
		elif [ "$hostos" = "macos" ] ; then
			log "   host => attach vm to virtual host interfaces"
			log "           opts: <name>_ip_start"
			log "                 <name>_ip_end"
			log "                 <name>_ip_mask"
			log "                 <name>_mode = vm-only | vms-only | host-only | nat | bridge"
			log "                 <name>_backend = <physical_device>"
		fi
		fatal "Aborted"
	fi

	v="$net"_mac
	netmac="${!v}"

	netopts="$netopts -device $netdevmodel,netdev=$net"
	[ "$netmac" != "" ] && netopts="$netopts,mac=$netmac"
	netopts="$netopts -netdev $netdevtype,id=$net"
	[ "$netdevopts" != "" ] && netopts="$netopts,$netdevopts"
done

if [ "$serial_ports" != "" ] ; then
	serialopts="-device virtio-serial-pci,id=vioser0"
	nr=1
	for sp in $serial_ports ; do
		v="$sp"_backend
		portbackend="${!v}"
		v="$sp"_portname
		portname="${!v}"
		[ "$portname" = "" ] && portname="$sp"
		if [ "$portbackend" = "unix-socket" ] ; then
			v="$sp"_sockpath
			sockpath="${!v}"
			[ "$sockpath" = "" ] && sockpath="$vmroot/.$vmconfig-serial-$portname"
			serialopts="$serialopts -device virtserialport,bus=vioser0.0,nr=$nr,chardev=charchannel$nr,id=channel$nr,name=quickemu.$portname"
			serialopts="$serialopts -chardev socket,id=charchannel$nr,path=$sockpath,server=on,wait=off"
		elif [ "$portbackend" = "chardev" ] ; then
			v="$sp"_filepath
			filepath="${!v}"
			if [ "$filepath" = "" ] ; then
				fatal "Missing $v value"
			fi
			serialopts="$serialopts -device virtserialport,bus=vioser0.0,nr=$nr,chardev=charchannel$nr,id=channel$nr,name=quickemu.$portname"
			serialopts="$serialopts -chardev serial,id=charchannel$nr,path=$sockpath"
		elif [ "$portbackend" = "null" ] ; then
			serialopts="$serialopts -device virtserialport,bus=vioser0.0,nr=$nr,chardev=charchannel$nr,id=channel$nr,name=quickemu.$portname"
			serialopts="$serialopts -chardev null,id=charchannel$nr"
		else
			fatal "Invalid serial port backend $v=$portbackend, must be unix-socket|chardev|null"
		fi
		nr=$(expr $nr + 1)
	done
fi

shift

if echo $@ | grep -qw -- -gui ; then
    ui_opts="
        -device qemu-xhci
        -device usb-kbd
        -device usb-tablet
        -device $gui_video
        -device intel-hda
        -device hda-output
        -device hda-duplex"
elif echo $@ | grep -qw -- -vnc ; then
    ui_opts="
        -device qemu-xhci
        -device usb-kbd
        -device $vnc_video
        -device usb-tablet
        -display vnc=:$vnc_screen"
elif echo $@ | grep -wq -- -console ; then
    ui_opts="-nographic"
else
    echo "Usage: $0 <config> -gui|-vnc|-console [-b]" 1>&2
    exit 1
fi

if [ "$vnc_screen" != "" ] ; then
	log "VNC screen $vnc_screen"
fi

baseopts="-name guest=$vmname,debug-threads=on"

if [ "$monitor_socket" = "auto" ] ; then
	mon_opts="-monitor unix:$runvm_dir/$vmname,server,nowait"
elif [ "$monitor_socket" = "none" -o "$monitor_soscket" = "disabled" -o "$monitor_socket" = "off" ] ; then
	mon_opts=""
elif [ "$monitor_socket" = "unix" -a "$monitor_path" != "" ] ; then
	mon_opts="-monitor unix:$monitor_path,server,nowait"
else
	mon_opts="-monitor $monitor_socket"
fi

if [ ! -d "$runvm_dir" ] ; then
	if ! mkdir "$runvm_dir" ; then
		fatal "Unable to create directory $runvm_dir"
	fi
fi

if echo $@ | grep -wq -- "--background\|-b" ; then
	cmd="$need_sudo $qemu
		$baseopts
		-M $platform $accel
		-cpu $cpumodel
		-smp $vcpus
		-m $ram
		-rtc base=localtime,clock=host
		$efi_opts $diskopts $netopts $serialopts $ui_opts $mon_opts $extras"
	nohup $debug $cmd $extra_opts 2>/dev/null 1>/dev/null &
else
	cmd="$need_sudo $(which $qemu)
		$baseopts
		-M $platform $accel
		-cpu $cpumodel
		-smp $vcpus
		-m $ram
		-rtc base=localtime,clock=host
		$efi_opts $diskopts $netopts $serialopts $ui_opts $mon_opts $extras"
	exec $debug $cmd $extra_opts
fi
